import e from"stream";import r from"process";var n={};var t=r;const a=e;const o=a.PassThrough;const i=Array.prototype.slice;n=merge2;function merge2(){const e=[];const r=i.call(arguments);let n=false;let a=r[r.length-1];a&&!Array.isArray(a)&&null==a.pipe?r.pop():a={};const s=false!==a.end;const p=true===a.pipeError;null==a.objectMode&&(a.objectMode=true);null==a.highWaterMark&&(a.highWaterMark=64*1024);const l=o(a);function addStream(){for(let r=0,n=arguments.length;r<n;r++)e.push(pauseStreams(arguments[r],a));mergeStream();return this}function mergeStream(){if(n)return;n=true;let r=e.shift();if(!r){t.nextTick(endStream);return}Array.isArray(r)||(r=[r]);let a=r.length+1;function next(){if(!(--a>0)){n=false;mergeStream()}}function pipe(e){function onend(){e.removeListener("merge2UnpipeEnd",onend);e.removeListener("end",onend);p&&e.removeListener("error",onerror);next()}function onerror(e){l.emit("error",e)}if(e._readableState.endEmitted)return next();e.on("merge2UnpipeEnd",onend);e.on("end",onend);p&&e.on("error",onerror);e.pipe(l,{end:false});e.resume()}for(let e=0;e<r.length;e++)pipe(r[e]);next()}function endStream(){n=false;l.emit("queueDrain");s&&l.end()}l.setMaxListeners(0);l.add=addStream;l.on("unpipe",(function(e){e.emit("merge2UnpipeEnd")}));r.length&&addStream.apply(null,r);return l}function pauseStreams(e,r){if(Array.isArray(e))for(let n=0,t=e.length;n<t;n++)e[n]=pauseStreams(e[n],r);else{!e._readableState&&e.pipe&&(e=e.pipe(o(r)));if(!e._readableState||!e.pause||!e.pipe)throw new Error("Only readable stream can be merged.");e.pause()}return e}var s=n;export default s;

